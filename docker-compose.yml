version: '3.8'

services:
  # HoneyNet Application
  honeynet:
    build: .
    container_name: honeynet-app
    ports:
      - "80:8000"
      - "443:8000"
    environment:
      - DEPLOYMENT_MODE=production
      - DB_HOST=postgres
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - SENTRY_DSN=${SENTRY_DSN}
      - GOOGLE_ANALYTICS_ID=${GOOGLE_ANALYTICS_ID}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./backups:/app/backups
      - honeynet_analytics:/app/analytics.db
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - honeynet-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: honeynet-db
    environment:
      POSTGRES_DB: ${DB_NAME:-honeynet_prod}
      POSTGRES_USER: ${DB_USER:-honeynet_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - honeynet-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-honeynet_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: honeynet-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-honeynet123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - honeynet-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: honeynet-nginx
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - honeynet
    restart: unless-stopped
    networks:
      - honeynet-network

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: honeynet-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - honeynet-network

  # Grafana Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: honeynet-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped
    networks:
      - honeynet-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  honeynet_analytics:

networks:
  honeynet-network:
    driver: bridge
